import bot
from aiogram import F, Router, types

from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.types import (CallbackQuery, Message)
import os

from process import check_fsm_data, process_add_to_irbis_repo
from lexicon.lexicon_ru import LEXICON_RU
from keyboards.keyboards import keyboards_start_help, keyboards_type_pub, keyboards_yes_no, keyboards_send_yes_no, \
    public_types_list

router = Router()


# C–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å, –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–π –æ—Ç StatesGroup, –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—à–µ–π FSM

class FSMAddToRepoForm(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Ç—Å–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    get_pdf = State()
    author = State()
    author_question = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    authors = State()
    zaglavie = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    typ_pub = State()
    year = State()
    annotation = State()
    keywords = State()
    abstract = State()
    keywords_en_question = State()
    keywords_en = State()
    keywords_en_answere = State()
    # check_add_user_data = State()
    end_qestion = State()

    all_data = {}


@router.callback_query(F.data == '!_add_new_data_!', StateFilter(default_state))
async def process_add_to_repo(callback: CallbackQuery, state: FSMContext):
    keyboard_to_delete = types.ReplyKeyboardRemove()  # –£–¥–∞–ª–µ–Ω–∏–µ –†–µ–ø–ª–∏ –∫–Ω–æ–ø–æ–∫
    await callback.message.answer(text='–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf\n\n‚ùó‚ùó‚ùó –†–∞–∑–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20–ú–±.‚ùó‚ùó‚ùó\n'
                                       '–ï—Å–ª–∏ —Ñ–∞–π–ª –≤–µ—Å–∏—Ç –±–æ–ª–µ–µ 20–ú–±, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å —Å–∞–π—Ç–∞ rid.gnpbu.ru –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
                                       '–Ω–∞ –ø–æ—á—Ç—É repository@gnpbu.ru –≤–º–µ—Å—Ç–µ —Å —Ñ–∞–π–ª–æ–º pdf',
                                  reply_markup=keyboard_to_delete)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await callback.answer()
    await state.set_state(FSMAddToRepoForm.get_pdf)


@router.message(F.document, StateFilter(FSMAddToRepoForm.get_pdf))
async def process_pdf_sent(message: Message, state: FSMContext):
    if message.document.mime_type == 'application/pdf':
        if message.document.file_size <= 20971520:
            file_id = message.document.file_id
            file = await bot.bot.get_file(file_id)
            file_name = message.document.file_name
            file_path = file.file_path
            await bot.bot.download_file(file_path, file_name)
            print(message.document.file_size)
            await state.update_data(get_pdf=message.document.file_name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
            await message.answer(text=f'–°–ø–∞—Å–∏–±–æ!\n–§–∞–π–ª "{file_name}" –ø—Ä–∏–Ω—è—Ç.\n\n'
                                      f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∞–≤—Ç–æ—Ä–∞\n\n–≤ —Ñ–æ—Ä–º–∞—Ç–µ - –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ\n\n'
                                      f'–ò–Ω–∏—Ü–∏–∞–ª—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è\n\n–ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö')
            await state.set_state(FSMAddToRepoForm.author)
        else:
            await message.answer(
                text=f'–§–∞–π–ª "{message.document.file_name}" –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ 20–ú–±.\n'
                     f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –ø–æ—á—Ç—É repository@gnpbu.ru\n'
                     f'–®–∞–±–ª–æ–Ω –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –Ω–∞ rid.gnpbu.ru\n\n'
                     f'–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20–ú–± –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å /cancel\n'
                     f'üëá Menu ->  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
    else:
        await message.answer(
            text=f'–§–∞–π–ª "{message.document.file_name}" –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf')
    print(await state.get_data())


@router.message(StateFilter(FSMAddToRepoForm.author))
async def process_author1_sent(message: Message, state: FSMContext):
    try:
        if await check_fsm_data.check_author(message.text):
            await state.update_data(author=message.text)
            await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –∞–≤—Ç–æ—Ä–æ–≤?', reply_markup=keyboards_yes_no)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
            await state.set_state(FSMAddToRepoForm.author_question)
        else:
            await message.answer(text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –§–ò–û')
    except:
        await message.answer(text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –§–ò–û')

    print(await state.get_data())


@router.message(StateFilter(FSMAddToRepoForm.author_question))
# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º yes
@router.callback_query(F.data == '!_yes_!', StateFilter(FSMAddToRepoForm.author_question))
async def process_author_question_command_yes(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.edit_text(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    await state.set_state(FSMAddToRepoForm.authors)


# –ï—Å–ª–∏ no —Ç–æ –ø—Ä—ã–≥–∞–µ–º –≤ keywords_en
@router.callback_query(F.data == '!_no_!', StateFilter(FSMAddToRepoForm.author_question))
async def process_author_question_command_no(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.edit_text(text='–°–ø–∞—Å–∏–±–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–ª–∞–≤–∏–µ')
    await state.set_state(FSMAddToRepoForm.zaglavie)


@router.message(StateFilter(FSMAddToRepoForm.authors))
async def process_author_many_sent(message: Message, state: FSMContext):
    try:
        if await check_fsm_data.check_authors(message.text):
            await state.update_data(authors=message.text)
            await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–ª–∞–≤–∏–µ!')
            await state.set_state(FSMAddToRepoForm.zaglavie)
        else:
            await message.answer(text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –§–ò–û')
    except:
        await message.answer(text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –§–ò–û')
    print(await state.get_data())


@router.message(StateFilter(FSMAddToRepoForm.author))
async def warning_not_author(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –§–ò–û')


@router.message(StateFilter(FSMAddToRepoForm.zaglavie))
async def process_zaglavie_sent(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "zaglavie"
    await state.update_data(zaglavie=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', reply_markup=keyboards_type_pub)
    await state.set_state(FSMAddToRepoForm.typ_pub)
    print(await state.get_data())


@router.callback_query(StateFilter(FSMAddToRepoForm.typ_pub))
async def process_type_pub_sent(callback: CallbackQuery, state: FSMContext):
    await state.update_data(typ_pub=callback.data)
    await callback.message.delete()
    await callback.message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
    await state.set_state(FSMAddToRepoForm.year)
    print(await state.get_data())


@router.message(StateFilter(FSMAddToRepoForm.year))
async def process_year_sent(message: Message, state: FSMContext):
    if await check_fsm_data.check_year(message.text):
        await state.update_data(year=message.text)
        await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await state.set_state(FSMAddToRepoForm.annotation)
    else:
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n–ü—Ä–∏–º–µ—Ä: 17.11.2023')
    print(await state.get_data())


# –ï—Å–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –≥–æ–¥
@router.message(StateFilter(FSMAddToRepoForm.year))
async def warning_year_sent(message: Message):
    await message.answer(text='–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è.\n–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è')


@router.message(StateFilter(FSMAddToRepoForm.annotation))
async def process_annotation_sent(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "annotation"
    await state.update_data(annotation=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π')
    await state.set_state(FSMAddToRepoForm.keywords)
    print(await state.get_data())


@router.message(StateFilter(FSMAddToRepoForm.keywords))
async def process_abstract_sent(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "keywords"
    await state.update_data(keywords=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ? (Abstract)',
                         reply_markup=keyboards_yes_no)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await state.set_state(FSMAddToRepoForm.abstract)
    print(await state.get_data())


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ yes
@router.callback_query(F.data == '!_yes_!', StateFilter(FSMAddToRepoForm.abstract))
async def process_abstract_command_yes(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.edit_text(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ')
    await state.set_state(FSMAddToRepoForm.keywords_en_question)


# –ï—Å–ª–∏ no —Ç–æ –ø—Ä—ã–≥–∞–µ–º –≤ keywords_en
@router.callback_query(F.data == '!_no_!', StateFilter(FSMAddToRepoForm.abstract))
async def process_abstract_command_no(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.edit_text(text='–°–ø–∞—Å–∏–±–æ!\n\n–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ?! ',
                                     reply_markup=keyboards_yes_no)
    await state.set_state(FSMAddToRepoForm.keywords_en)


@router.message(StateFilter(FSMAddToRepoForm.keywords_en_question))
async def process_keywords_en_sent(message: Message, state: FSMContext):
    await state.update_data(abstract=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ??',
                         reply_markup=keyboards_yes_no)
    await state.set_state(FSMAddToRepoForm.keywords_en)
    print(await state.get_data())


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ yes
@router.callback_query(F.data == '!_yes_!', StateFilter(FSMAddToRepoForm.keywords_en))
async def process_keywords_en_command_yes(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.edit_text(text='–°–ø–∞—Å–∏–±–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ')
    await state.set_state(FSMAddToRepoForm.keywords_en_answere)


# –ï—Å–ª–∏ no —Ç–æ –ø—Ä—ã–≥–∞–µ–º –≤ pdf
@router.callback_query(F.data == '!_no_!', StateFilter(FSMAddToRepoForm.keywords_en))
async def process_keywords_en_command_no(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    all_data = await state.get_data()
    await callback.message.edit_text(text=f'–°–ø–∞—Å–∏–±–æ!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
                                          f'–ê–≤—Ç–æ—Ä - {all_data["author"]}\n'
                                          f'–ï—â–µ –∞–≤—Ç–æ—Ä—ã - {await check_fsm_data.check_print_authors(all_data)}\n'
                                          f'–ó–∞–≥–ª–∞–≤–∏–µ - {all_data["zaglavie"]}\n'
                                          f'–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - {public_types_list[int(all_data["typ_pub"])]}\n'
                                          f'–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è - {all_data["year"]}\n'
                                          f'–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è - {all_data["annotation"]}\n'
                                          f'–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - {all_data["keywords"]}\n'
                                          f'ABSTRACT - {await check_fsm_data.check_print_abstract(all_data)}\n'
                                          f'KEYWORDS - {await check_fsm_data.check_print_keywords_en(all_data)}\n'
                                          f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ - {all_data["get_pdf"]}'
                                          f'\n\n'
                                          f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=keyboards_send_yes_no)
    await state.set_state(FSMAddToRepoForm.end_qestion)


@router.message(StateFilter(FSMAddToRepoForm.keywords_en_answere))
async def process_keywords_en_sent(message: Message, state: FSMContext):
    await state.update_data(keywords_en=message.text)
    all_data = await state.get_data()
    await message.answer(text=f'–°–ø–∞—Å–∏–±–æ!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
                              f'–ê–≤—Ç–æ—Ä - {all_data["author"]}\n'
                              f'–ï—â–µ –∞–≤—Ç–æ—Ä—ã - {await check_fsm_data.check_print_authors(all_data)}\n'
                              f'–ó–∞–≥–ª–∞–≤–∏–µ - {all_data["zaglavie"]}\n'
                              f'–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - {public_types_list[int(all_data["typ_pub"])]}\n'
                              f'–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è - {all_data["year"]}\n'
                              f'–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è - {all_data["annotation"]}\n'
                              f'–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - {all_data["keywords"]}\n'
                              f'ABSTRACT - {await check_fsm_data.check_print_abstract(all_data)}\n'
                              f'KEYWORDS - {await check_fsm_data.check_print_keywords_en(all_data)}\n'
                              f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ - {all_data["get_pdf"]}'
                              f'\n\n'
                              f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=keyboards_send_yes_no)
    await state.set_state(FSMAddToRepoForm.end_qestion)



# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ yes
@router.callback_query(F.data == '!_send_!', StateFilter(FSMAddToRepoForm.end_qestion))
async def process_keywords_en_command_yes(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    try:
        send_data = await state.get_data()
        data_returned = await process_add_to_irbis_repo.record_to_repo(send_data)
        await callback.message.answer(text=f'{data_returned}')
        print('send_data = ', send_data)
    except:
        await callback.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ –ø–æ—á—Ç—É repository@gnpbu.ru')

    await callback.message.edit_text(text='–°–ø–∞—Å–∏–±–æ!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –≤ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –†–ê–û')
    await state.clear()
    await callback.message.answer(text=LEXICON_RU['end_add_to_repo'], reply_markup=keyboards_start_help)


# –ï—Å–ª–∏ no —Ç–æ –ø—Ä—ã–≥–∞–µ–º –≤ pdf
@router.callback_query(F.data == '!_no_send_!', StateFilter(FSMAddToRepoForm.end_qestion))
async def process_keywords_en_command_no(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    try:
        send_data = await state.get_data()
        os.remove(send_data['get_pdf'])
        await callback.message.edit_text(text=f'–§–∞–π–ª "{send_data["get_pdf"]}" —É–¥–∞–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞')
    except:
        pass
    # await callback.message.answer(keywords_en=callback.message.text)
    await callback.message.edit_text(
        text='–°–ø–∞—Å–∏–±–æ!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å üìô", —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –†–ê–û')
    await state.clear()
    await callback.message.answer(text=LEXICON_RU['end_add_to_repo'], reply_markup=keyboards_start_help)
